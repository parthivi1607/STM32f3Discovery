/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

//PWM using TIMER1

#include "stm32f30x.h"
#include "stm32f3_discovery.h"

int main(void)
{
	int i=0;

	//GPIO initialization
	RCC->AHBENR = 1<<21; //GPIOE clock enable
	RCC->APB2ENR = 1<<11; //TIMER1 clock enable
	GPIOE->MODER = (1<<19) | (1<<23); //10 for alternate function
	//GPIOE->OTYPER is set to reset value = 0 = o/p push pull
	GPIOE->PUPDR = (1<<19) | (1<<23); //10 for pull down
	GPIOE->AFR[1] = (1<<5); //AF2 for PE9
	GPIOE->AFR[1] = (1<<13); //AF2 for PE11

	//PE9 TIM1 ch1 : 19&18
	//PE11 TIM1 ch2 : 23&22

	//TIMER initialization

	//TIM1->CR1 DIR bit is at reset value = 0 for up-counting mode
	//TIM1->CR1 CMS bit is at 00 for edge-aligned mode
	TIM1->CR1 = 1<<7; //set ARPE
	TIM1->ARR = 1024; //10bit
	//TIM1->PSC : no prescaler
	//TIM1->BDTR LOCK[1:0] = 00 = lock off, no bit is write protected

	//TIM1->CCER CC1E & CC2E = 0 = OFF
	//TIM1->CCMR1 CC1S = 00 for output compare OC mode
	//TIM1->CCMR1 CC2S = 00 for output compare OC mode
	//for channel 1
	TIM1->CCMR1 = (1<<3); //preload enable
	TIM1->CCMR1 = (1<<5) | (1<<6); //PWM mode 1
	//for channel 2
	TIM1->CCMR1 = (1<<11); //preload enable
	TIM1->CCMR1 = (1<<13) | (1<<14); //PWM mode 1
	//TIM1->CCER CC1P & CC2P = 0 = active high
	//enabling CC1 & CC2 channels as output
	TIM1->CCER = (1<<0) | (1<<4); //CC1 & CC2 output enable
	TIM1->BDTR = 1<<15; //MOE: Main Output Enable is set
	//MOE=1, OSSI=X, OSSR=0: When inactive, OC/OCN outputs are disabled

	//As the preload registers are transferred to the shadow registers
	//only when an update event occurs, before starting the counter,
	//you have to initialize all the registers by setting the UG bit in
	//the TIMx_EGR register
	TIM1->EGR = 1<<0;
	TIM1->CR1 = 1<<0; //counter enable CEN

	while()
	{
		TIM1->CCR1 = 0; TIM1->CCR2 = 1024;
		for(i=0; i<500000; i++);
		TIM1->CCR1 = 256; TIM1->CCR2 = 512;
		for(i=0; i<500000; i++);
		TIM1->CCR1 = 512; TIM1->CCR2 = 256;
		for(i=0; i<500000; i++);
		TIM1->CCR1 = 1024; TIM1->CCR2 = 0;
		for(i=0; i<500000; i++);
	}
}